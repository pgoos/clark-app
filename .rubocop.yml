require:
  - rubocop-rspec
  - rubocop-rails

AllCops:
  TargetRubyVersion: 2.6.3
  Exclude:
    - "bin/**/*"
    - "db/schema.rb"

# Commonly used screens these days easily fit more than 80 characters.
Layout/LineLength:
  Max: 120

# Too short methods lead to extraction of single-use methods, which can make
# the code easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  Max: 20
  Exclude:
    - db/migrate/*.rb

Style/Encoding:
  Enabled: true
  Include:
    - "db/migrate/*.rb"

Style/NumericLiterals:
  Enabled: true
  Exclude:
    - "lib/lifters/domain/retirement/**/*"
    - "spec/lib/lifters/domain/retirement/**/*"

Style/GlobalVars:
  Enabled: true
  AllowedVariables:
    - $stomp
    - $redis

Style/RegexpLiteral:
  AllowInnerSlashes: true

# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Max: 1500

Metrics/ModuleLength:
  Max: 1500

# Raise AbcSize from 15 to 20
Metrics/AbcSize:
  Max: 20

# No space makes the method definition shorter and differentiates
# from a regular assignment.
Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

Layout/EmptyLineAfterGuardClause:
  Enabled: false

Style/ClassAndModuleChildren:
  Exclude:
    - "app/controllers/**/*"
    - "app/models/**/*"
    - "app/helpers/admin/**/*"
    - "spec/**/*"

# Single quotes being faster is hardly measurable and only affects parse time.
# Enforcing double quotes reduces the times where you need to change them
# when introducing an interpolation. Use single quotes only if their semantics
# are needed.
Style/StringLiterals:
  EnforcedStyle: double_quotes

# We do not need to support Ruby 1.9, so this is good to use.
Style/SymbolArray:
  Enabled: true

# Mixing the styles looks just silly.
Style/HashSyntax:
 EnforcedStyle: ruby19_no_mixed_keys
 Exclude:
   - "config/routes.rb"

Style/IfUnlessModifier:
  Enabled: false

# has_key? and has_value? are far more readable than key? and value?
# Style/DeprecatedHashMethods:
  # Enabled: false

# String#% is by far the least verbose and only object oriented variant.
Style/FormatString:
  EnforcedStyle: percent

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    # inject seems more common in the community.
    reduce: inject

# Either allow this style or don't. Marking it as safe with parenthesis
# is silly. Let's try to live without them for now.
Style/ParenthesesAroundCondition:
  AllowSafeAssignment: false
Lint/AssignmentInCondition:
  AllowSafeAssignment: false

# A specialized exception class will take one or more arguments and construct the message from it.
# So both variants make sense.
Style/RaiseArgs:
  Enabled: false

# Indenting the chained dots beneath each other is not supported by this cop,
# see https://github.com/bbatsov/rubocop/issues/1633
Layout/MultilineOperationIndentation:
  Enabled: false

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# Suppressing exceptions can be perfectly fine, and be it to avoid to
# explicitly type nil into the rescue since that's what you want to return,
# or suppressing LoadError for optional dependencies
Lint/SuppressedException:
  Enabled: false

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true
  EnforcedStyleForEmptyBraces: space

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space

Layout/HashAlignment:
  Enabled: false

Metrics/BlockLength:
  ExcludedMethods: ["describe", "context", "state_machine", "shared_examples", "namespace", "helpers", "it", "factory", "define"]

# { ... } for multi-line blocks is okay, follow Weirichs rule instead:
# https://web.archive.org/web/20140221124509/http://onestepback.org/index.cgi/Tech/Ruby/BraceVsDoEnd.rdoc
Style/BlockDelimiters:
  Enabled: false

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

# Check with yard instead.
Style/Documentation:
  Enabled: false

Style/LambdaCall:
  Enabled: false

# This is just silly. Calling the argument `other` in all cases makes no sense.
# Naming/BinaryOperatorParameterName:
#   Enabled: false

Naming/MemoizedInstanceVariableName:
  Enabled: true

# There are valid cases, for example debugging Cucumber steps,
# also they'll fail CI anyway
Lint/Debugger:
  Enabled: false

## --- Rails ---------------------------------------------------------------------------------------
Bundler/OrderedGems:
  Enabled: false

Rails:
  Enabled: true
## --- RSpec ---------------------------------------------------------------------------------------

# Check that instances are not being stubbed globally.
RSpec/AnyInstance:
  Enabled: false

# Check that the first argument to the top level describe is the tested class or
# module.
RSpec/DescribeClass:
  Enabled: false

# Use `described_class` for tested class / module.
RSpec/DescribeMethod:
  Enabled: false

# Checks that the second argument to top level describe is the tested method
# name.
RSpec/DescribedClass:
  Enabled: false

# Checks for long example.
RSpec/ExampleLength:
  Enabled: false
  Max: 5

# Do not use should when describing your tests.
RSpec/ExampleWording:
  Enabled: false
  CustomTransform:
    be: is
    have: has
    not: does not
  IgnoredWords: []

# Checks the file and folder naming of the spec file.
RSpec/FilePath:
  Enabled: false
  CustomTransform:
    RuboCop: rubocop
    RSpec: rspec

# Checks if there are focused specs.
RSpec/Focus:
  Enabled: true

# Checks for the usage of instance variables.
RSpec/InstanceVariable:
  Enabled: false

# Checks for multiple top-level describes.
RSpec/MultipleDescribes:
  Enabled: false

# Enforces the usage of the same method on all negative message expectations.
RSpec/NotToNot:
  EnforcedStyle: not_to
  Enabled: true

# Prefer using verifying doubles over normal doubles.
RSpec/VerifiedDoubles:
  Enabled: false

# We are a germany company with unlaugh on commments
Style/AsciiComments:
  Enabled: false

# We think it is ok to have chain methods for tests. It is intended to fix Law of Demeter violations
# We like fluent interfaces, as long as they do not violate the Law of Demeter.
RSpec/MessageChain:
  Enabled: false

# Checks that message expectations are set using spies, which is of no use.
# It's completely acceptable to setup doubles as spies or as mocks and should not be blocked.
RSpec/MessageSpies:
  Enabled: false

# We like naming our subjects, subject!
RSpec/NamedSubject:
  Enabled: false

RSpec/MultipleExpectations:
  Enabled: false

RSpec/NestedGroups:
  Enabled: false

RSpec/LetSetup:
  Enabled: false

Style/YodaCondition:
  Enabled: false

Style/HashEachMethods:
  Enabled: false

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: false

# This rubocop rule heavily violates the developer's freedom to properly build / engineer an interface of a
# class / module. By forcing to provide an accessor declaration instead of a trivial implementation, it is not
# possible to provide private or protected accessor methods. The standard ruby accessor declaration is public
# per definition.
Style/TrivialAccessors:
  Enabled: false

RSpec/ContextWording:
  Enabled: false

Rails/Exit:
  Enable: true
  Include:
    - lib/tasks/**/*.rake
  Exclude:
    - db/*
